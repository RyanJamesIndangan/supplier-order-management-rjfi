{
  "info": {
    "name": "AI Supplier Order Management API - Ryan Indangan",
    "description": "Complete API collection with automated tests for AI-powered supplier offer matching system. Built by Ryan James Francisco Indangan for AI Software Developer position.\n\n## Quick Start\n1. Import this collection\n2. Run 'Runner' > Select entire collection\n3. Click 'Run Collection' for automated testing\n\n## Features\n- ü§ñ AI-powered product matching\n- üì§ File upload (Excel/CSV)\n- üîê JWT authentication\n- üìä Dashboard analytics\n- ‚úÖ Automated tests\n\n## Author\nRyan James Francisco Indangan\nPosition: AI Software Developer",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "ryan-supplier-ai-matching-v2"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "supplierId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "offerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "fileId",
      "value": "",
      "type": "string"
    },
    {
      "key": "matchId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• 1. System Health",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Server is healthy\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"OK\");",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Version is 2.0.0\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.eql(\"2.0.0\");",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Author is Ryan Indangan\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.author).to.include(\"Ryan\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "API Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ API info retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.eql(\"2.0.0\");",
                  "    pm.expect(jsonData.ai).to.include(\"Gemini\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", ""]
            }
          }
        }
      ]
    },
    {
      "name": "üîê 2. Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ User registered (201 or 400 if exists)\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.test(\"‚úÖ Token received on registration\", function () {",
                  "        pm.expect(jsonData.data.token).to.be.a('string');",
                  "        pm.collectionVariables.set(\"authToken\", jsonData.data.token);",
                  "        pm.collectionVariables.set(\"userId\", jsonData.data.user.id);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"ryan@indangan.com\",\n  \"password\": \"SecurePassword123!\",\n  \"name\": \"Ryan James Francisco Indangan\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"‚úÖ JWT token received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.token).to.be.a('string');",
                  "    pm.expect(jsonData.data.token.length).to.be.above(20);",
                  "});",
                  "",
                  "// Save token for subsequent requests",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"authToken\", jsonData.data.token);",
                  "pm.collectionVariables.set(\"userId\", jsonData.data.user.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"ryan@indangan.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Profile (Protected)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Profile retrieved with auth\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.name).to.include(\"Ryan\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä 3. Dashboard & Analytics",
      "item": [
        {
          "name": "Get Dashboard Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Dashboard data retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.statistics).to.have.property('totalFiles');",
                  "    pm.expect(jsonData.data.statistics).to.have.property('matchRate');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/upload/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "upload", "dashboard"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ 4. Suppliers",
      "item": [
        {
          "name": "Get All Suppliers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Suppliers retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "// Save first supplier ID",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.collectionVariables.set(\"supplierId\", jsonData.data[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/suppliers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "suppliers"]
            }
          }
        }
      ]
    },
    {
      "name": "üì¶ 5. Products",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Products retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.count).to.be.above(0);",
                  "});",
                  "",
                  "// Save first product ID",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.collectionVariables.set(\"productId\", jsonData.data[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "products"]
            }
          }
        },
        {
          "name": "Search Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Product search works\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/products/search?query=mouse",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "products", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "mouse"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üì§ 6. File Upload & AI Matching (CORE FEATURE)",
      "item": [
        {
          "name": "Get All Uploaded Files",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Files list retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "// Save first file ID for match testing",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.collectionVariables.set(\"fileId\", jsonData.data[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/upload/files",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "upload", "files"]
            }
          }
        },
        {
          "name": "Get AI Match Results for File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Match results retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('statistics');",
                  "    pm.expect(jsonData.data).to.have.property('matches');",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Statistics include match counts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.statistics).to.have.property('total');",
                  "    pm.expect(jsonData.data.statistics).to.have.property('matched');",
                  "});",
                  "",
                  "// Save first match ID for review testing",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.data.matches && jsonData.data.matches.length > 0) {",
                  "    pm.collectionVariables.set(\"matchId\", jsonData.data.matches[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/upload/files/{{fileId}}/matches",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "upload", "files", "{{fileId}}", "matches"]
            }
          }
        },
        {
          "name": "Approve Match",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Match status updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.eql('approved');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"approved\",\n  \"notes\": \"Reviewed and approved by Ryan\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/upload/matches/{{matchId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "upload", "matches", "{{matchId}}", "status"]
            }
          }
        },
        {
          "name": "üìù Upload Sample File (Manual Test)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ File uploaded successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('uploaded');",
                  "    pm.expect(jsonData.data.file).to.have.property('id');",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Preview data included\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.preview).to.be.an('array');",
                  "});",
                  "",
                  "// Save new file ID",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"fileId\", jsonData.data.file.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample-data/supplier-offers/tech-supplies-offers.csv",
                  "description": "Upload CSV file from sample-data folder"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "upload"]
            },
            "description": "NOTE: This request requires manual file selection in Postman. Go to Body > form-data > select file from sample-data/supplier-offers/"
          }
        }
      ]
    },
    {
      "name": "üíº 7. Procurement Dashboard",
      "item": [
        {
          "name": "Get Procurement Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Dashboard data retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/supplier-offers/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "supplier-offers", "dashboard"]
            }
          }
        },
        {
          "name": "Get Offers by Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Offers retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "// Save first offer ID for testing",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0 && jsonData.data[0].offers && jsonData.data[0].offers.length > 0) {",
                  "    pm.collectionVariables.set(\"offerId\", jsonData.data[0].offers[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/supplier-offers/by-product",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "supplier-offers", "by-product"]
            }
          }
        },
        {
          "name": "Get Offers for Specific Product",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/supplier-offers/product/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "supplier-offers", "product", "{{productId}}"]
            }
          }
        },
        {
          "name": "Accept Offer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Offer accepted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.equal('accepted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/supplier-offers/{{offerId}}/accept",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "supplier-offers", "{{offerId}}", "accept"]
            }
          }
        },
        {
          "name": "Reject Offer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"‚úÖ Offer rejected\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.equal('rejected');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/supplier-offers/{{offerId}}/reject",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "supplier-offers", "{{offerId}}", "reject"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('üöÄ Running request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test(\"‚è±Ô∏è Response time is acceptable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ]
      }
    }
  ]
}
