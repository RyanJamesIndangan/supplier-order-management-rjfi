services:
  postgres:
    image: postgres:15-alpine
    container_name: supplier-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=supplierdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - supplier-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supplier-order-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - API_VERSION=v1
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/supplierdb?schema=public
      - JWT_SECRET=supplier-order-mgmt-secret-key-2024
      - GEMINI_API_KEY=AIzaSyDwE9AroHeB22TRHsm35e1hotQHKd9XNSE
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - supplier-network

  # Prisma Studio - Database UI
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile.studio
    container_name: supplier-prisma-studio
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/supplierdb?schema=public
    volumes:
      - ./prisma:/app/prisma:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - supplier-network
    command: npx prisma studio --port 5555 --hostname 0.0.0.0

networks:
  supplier-network:
    driver: bridge

volumes:
  postgres_data:

